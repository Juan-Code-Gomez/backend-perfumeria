# ================================================
# SETUP PARA CLIENTE EXISTENTE - ACTUALIZACI√ìN
# ================================================
# 
# Uso: ./setup-existing-client.ps1
# 
# Este script sincroniza un cliente que YA TIENE datos:
# 1. Marca la migraci√≥n baseline como aplicada
# 2. Aplica migraciones nuevas (si las hay)
# 3. Regenera Prisma Client
# 4. Compila la aplicaci√≥n
# ================================================

Write-Host ""
Write-Host "================================================" -ForegroundColor Cyan
Write-Host "  ACTUALIZACI√ìN DE CLIENTE EXISTENTE" -ForegroundColor Cyan
Write-Host "================================================" -ForegroundColor Cyan
Write-Host ""

function Exit-OnError {
    param($message)
    Write-Host "‚ùå Error: $message" -ForegroundColor Red
    exit 1
}

function Log-Step {
    param($message)
    Write-Host ""
    Write-Host "üîπ $message" -ForegroundColor Blue
}

# Verificar .env
if (-not (Test-Path ".env")) {
    Exit-OnError "Falta archivo .env con DATABASE_URL"
}

Write-Host "‚úÖ Archivo .env encontrado" -ForegroundColor Green

# Advertencia
Write-Host ""
Write-Host "‚ö†Ô∏è  IMPORTANTE: Este script es para clientes EXISTENTES" -ForegroundColor Yellow
Write-Host "   (bases de datos que ya tienen datos y estructura)" -ForegroundColor Yellow
Write-Host ""

$confirmation = Read-Host "¬øEsta base de datos YA TIENE datos? (si/no)"
if ($confirmation -ne "si" -and $confirmation -ne "s") {
    Write-Host ""
    Write-Host "‚ùå Setup cancelado" -ForegroundColor Yellow
    Write-Host "üí° Para clientes nuevos usa: .\setup-new-client.ps1" -ForegroundColor Cyan
    exit 0
}

# Verificar estado actual
Log-Step "Verificando estado de migraciones..."

try {
    $status = npx prisma migrate status 2>&1
    Write-Host $status -ForegroundColor Gray
} catch {
    Write-Host "‚ö†Ô∏è  No se pudo verificar estado" -ForegroundColor Yellow
}

# 1. Marcar baseline como aplicado
Log-Step "Marcando migraci√≥n baseline como aplicada..."
Write-Host "  Esto le dice a Prisma que el schema actual ya est√° en la BD" -ForegroundColor Gray

try {
    npx prisma migrate resolve --applied 20251025161155_baseline_complete_schema
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ö†Ô∏è  Baseline ya estaba marcado o no existe" -ForegroundColor Yellow
    } else {
        Write-Host "‚úÖ Baseline marcado como aplicado" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ö†Ô∏è  Error marcando baseline (puede ser que ya estaba)" -ForegroundColor Yellow
}

# 2. Aplicar migraciones nuevas (si las hay)
Log-Step "Aplicando migraciones pendientes..."
Write-Host "  Si hay migraciones nuevas desde el baseline, se aplicar√°n ahora" -ForegroundColor Gray

try {
    npx prisma migrate deploy
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ö†Ô∏è  No hay migraciones nuevas o ya est√°n aplicadas" -ForegroundColor Yellow
    } else {
        Write-Host "‚úÖ Migraciones aplicadas" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ö†Ô∏è  Error aplicando migraciones" -ForegroundColor Yellow
}

# 3. Generar Prisma Client
Log-Step "Generando Prisma Client..."

try {
    npx prisma generate
    if ($LASTEXITCODE -ne 0) {
        Exit-OnError "Fall√≥ la generaci√≥n de Prisma Client"
    }
    Write-Host "‚úÖ Prisma Client generado" -ForegroundColor Green
} catch {
    Exit-OnError "Error generando Prisma Client: $_"
}

# 4. Compilar aplicaci√≥n
Log-Step "Compilando aplicaci√≥n..."

try {
    npm run build
    if ($LASTEXITCODE -ne 0) {
        Exit-OnError "Fall√≥ la compilaci√≥n"
    }
    Write-Host "‚úÖ Aplicaci√≥n compilada" -ForegroundColor Green
} catch {
    Exit-OnError "Error compilando: $_"
}

# Verificar estado final
Log-Step "Estado final de migraciones:"

try {
    npx prisma migrate status
} catch {
    Write-Host "‚ö†Ô∏è  No se pudo verificar estado" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "================================================" -ForegroundColor Green
Write-Host "  ‚úÖ CLIENTE ACTUALIZADO EXITOSAMENTE" -ForegroundColor Green
Write-Host "================================================" -ForegroundColor Green
Write-Host ""

Write-Host "üìã Pr√≥ximos pasos:" -ForegroundColor Cyan
Write-Host "  1. Reiniciar el servicio backend" -ForegroundColor White
Write-Host "     npm run start:prod" -ForegroundColor Gray
Write-Host ""
Write-Host "  2. O con PM2:" -ForegroundColor White
Write-Host "     pm2 restart perfumeria-backend" -ForegroundColor Gray
Write-Host ""
Write-Host "  3. Probar funcionalidades principales" -ForegroundColor White
Write-Host ""
Write-Host "  4. Verificar m√≥dulos nuevos (Facturas, FIFO, etc.)" -ForegroundColor White
Write-Host ""

Write-Host "‚ú® Cliente sincronizado y listo" -ForegroundColor Green
Write-Host ""
