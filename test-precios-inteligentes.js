// Script para probar la nueva funcionalidad de precios inteligentes en carga masiva
const XLSX = require('xlsx');
const fs = require('fs');

// Crear un Excel de prueba que demuestre la nueva funcionalidad
function createPricingTestExcel() {
  const testData = [
    // CASO 1: Productos CON precio de venta espec√≠fico (se debe usar exactamente este precio)
    {
      'Nombre producto': 'Perfume Black XS Especial 100ml',
      'Categor√≠a': 'Perfumes 1.1',
      'Unidad': 'Mililitros',
      'Stock inicial': 10,
      'Precio compra': 15000,
      'Precio venta': 35000, // ‚Üê Precio espec√≠fico, NO debe aplicar el 80% autom√°tico
      'Proveedor': 'Fragancias Milano'
    },
    // CASO 2: Producto SIN precio de venta (debe calcular autom√°ticamente con 80% para Perfumes 1.1)
    {
      'Nombre producto': 'Perfume Invictus Autom√°tico 100ml',
      'Categor√≠a': 'Perfumes 1.1',
      'Unidad': 'Mililitros',
      'Stock inicial': 8,
      'Precio compra': 16000,
      'Precio venta': '', // ‚Üê Vac√≠o, debe calcular: 16000 √ó 1.80 = 28800
      'Proveedor': 'Fragancias Milano'
    },
    // CASO 3: Producto de otra categor√≠a CON precio espec√≠fico
    {
      'Nombre producto': 'Esencia Black XS Premium 30ml',
      'Categor√≠a': 'Esencias',
      'Unidad': 'Mililitros',
      'Stock inicial': 25,
      'Precio compra': 8000,
      'Precio venta': 18000, // ‚Üê Precio espec√≠fico, NO debe aplicar el 60% autom√°tico
      'Proveedor': 'Fragancias Milano'
    },
    // CASO 4: Producto de otra categor√≠a SIN precio (debe calcular autom√°ticamente con 60%)
    {
      'Nombre producto': 'Esencia Invictus Standard 30ml',
      'Categor√≠a': 'Esencias',
      'Unidad': 'Mililitros',
      'Stock inicial': 20,
      'Precio compra': 7500,
      'Precio venta': 0, // ‚Üê Cero, debe calcular: 7500 √ó 1.60 = 12000
      'Proveedor': 'Fragancias Milano'
    },
    // CASO 5: Splash con precio espec√≠fico
    {
      'Nombre producto': 'Splash Good Girl Deluxe 250ml',
      'Categor√≠a': 'Splashs',
      'Unidad': 'Mililitros',
      'Stock inicial': 15,
      'Precio compra': 12000,
      'Precio venta': 25000, // ‚Üê Precio espec√≠fico
      'Proveedor': 'Cosm√©ticos Naturales'
    },
    // CASO 6: Splash sin precio (debe calcular con 60%)
    {
      'Nombre producto': 'Splash Polo Blue Standard 250ml',
      'Categor√≠a': 'Splashs',
      'Unidad': 'Mililitros',
      'Stock inicial': 12,
      'Precio compra': 11000,
      'Precio venta': null, // ‚Üê Null, debe calcular: 11000 √ó 1.60 = 17600
      'Proveedor': 'Cosm√©ticos Naturales'
    }
  ];

  // Crear workbook y worksheet
  const ws = XLSX.utils.json_to_sheet(testData);
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, 'Productos');

  // Guardar archivo
  const fileName = 'test-precios-inteligentes.xlsx';
  XLSX.writeFile(wb, fileName);

  console.log('üìä ARCHIVO DE PRUEBA CREADO: ' + fileName);
  console.log('');
  console.log('üß™ CASOS DE PRUEBA INCLUIDOS:');
  console.log('');
  
  testData.forEach((product, index) => {
    const caso = index + 1;
    const tienePrecios = product['Precio venta'] && product['Precio venta'] !== '' && product['Precio venta'] !== 0;
    const esPerf11 = product['Categor√≠a'].includes('Perfumes 1.1');
    
    console.log(`CASO ${caso}: ${product['Nombre producto']}`);
    console.log(`   Categor√≠a: ${product['Categor√≠a']}`);
    console.log(`   Precio compra: $${product['Precio compra']}`);
    console.log(`   Precio venta Excel: ${product['Precio venta'] || 'VAC√çO'}`);
    
    if (tienePrecios) {
      console.log(`   ‚úÖ ESPERADO: Usar precio del Excel = $${product['Precio venta']}`);
    } else {
      const margen = esPerf11 ? 1.80 : 1.60;
      const esperado = product['Precio compra'] * margen;
      const porcentaje = esPerf11 ? '80%' : '60%';
      console.log(`   ü§ñ ESPERADO: Calcular autom√°tico = $${product['Precio compra']} √ó ${margen} = $${esperado} (${porcentaje})`);
    }
    console.log('');
  });

  console.log('üìù INSTRUCCIONES:');
  console.log('1. Carga este archivo usando la carga masiva CON proveedor');
  console.log('2. Revisa los logs en el servidor para verificar que se aplicaron los precios correctos');
  console.log('3. Verifica en la base de datos que los precios coincidan con lo esperado');
  console.log('');
  console.log('üéØ RESULTADOS ESPERADOS EN LOS LOGS:');
  console.log('- "üí∞ Usando precio de venta del Excel" para casos 1, 3, 5');
  console.log('- "üìä Precio calculado autom√°ticamente" para casos 2, 4, 6');
  console.log('- Perfumes 1.1 deben mostrar "80% rentabilidad"');
  console.log('- Otras categor√≠as deben mostrar "60% rentabilidad"');

  return fileName;
}

// Ejecutar la creaci√≥n del archivo de prueba
if (require.main === module) {
  console.log('üß™ CREANDO ARCHIVO DE PRUEBA PARA PRECIOS INTELIGENTES');
  console.log('=' .repeat(60));
  createPricingTestExcel();
}

module.exports = { createPricingTestExcel };
