┌─────────────────────────────────────────────────────────────────┐
│  🔗 CONECTAR A BD DE PRODUCCIÓN - GUÍA PASO A PASO              │
└─────────────────────────────────────────────────────────────────┘

═══════════════════════════════════════════════════════════════════
  📋 OPCIÓN 1: SCRIPT AUTOMÁTICO (Más Fácil)
═══════════════════════════════════════════════════════════════════

En PowerShell:

  PS> .\switch-database.ps1

Luego selecciona:
  [1] Conectar a PRODUCCIÓN

El script:
  ✓ Hace backup de tu .env actual
  ✓ Cambia a la DATABASE_URL pública de Railway
  ✓ Te muestra los comandos disponibles


═══════════════════════════════════════════════════════════════════
  📋 OPCIÓN 2: MANUAL (Más Control)
═══════════════════════════════════════════════════════════════════

PASO 1: Backup de tu .env actual
────────────────────────────────────────────────────────────────

  PS> Copy-Item .env .env.backup


PASO 2: Editar .env con la URL pública de Railway
────────────────────────────────────────────────────────────────

Abre .env y reemplaza DATABASE_URL por:

  DATABASE_URL="postgresql://postgres:SJBYEwPzlxYkrgMupzDOWYTAUXICMCHT@shinkansen.proxy.rlwy.net:21931/railway"
              ↑                 ↑                                    ↑               ↑       ↑
           usuario          password                               host            port   database

Explicación de los valores (de la imagen de Railway):

  PGUSER     = postgres
  PGPASSWORD = SJBYEwPzlxYkrgMupzDOWYTAUXICMCHT
  PGHOST     = shinkansen.proxy.rlwy.net  ← ⚠️ USA ESTE, NO el .internal
  PGPORT     = 21931
  PGDATABASE = railway


PASO 3: Guardar y cerrar


═══════════════════════════════════════════════════════════════════
  🧪 EJECUTAR DIAGNÓSTICO
═══════════════════════════════════════════════════════════════════

Ahora que estás conectado a PRODUCCIÓN:

┌─────────────────────────────────────────────────────────────────┐
│  TEST 1: Diagnóstico Completo                                    │
└─────────────────────────────────────────────────────────────────┘

  PS> node diagnose-dashboard.js

Esto verificará:
  ✓ Conexión a BD de producción
  ✓ Tablas existentes
  ✓ Datos en Sale, Expense, Product
  ✓ Migraciones aplicadas
  ✓ Consulta completa del dashboard

BUSCA líneas con ✗ para identificar el problema


┌─────────────────────────────────────────────────────────────────┐
│  TEST 2: Prisma Studio (Ver Datos)                               │
└─────────────────────────────────────────────────────────────────┘

  PS> npx prisma studio

Abrirá interfaz web en http://localhost:5555
Podrás ver todos los datos de producción


┌─────────────────────────────────────────────────────────────────┐
│  TEST 3: Consultas SQL Directas                                  │
└─────────────────────────────────────────────────────────────────┘

  PS> npx prisma db execute --stdin

Luego escribe SQL:

  SELECT COUNT(*) FROM "Sale";
  SELECT COUNT(*) FROM "Expense";
  SELECT COUNT(*) FROM "Product";


┌─────────────────────────────────────────────────────────────────┐
│  TEST 4: Servidor Local con BD de Producción                     │
└─────────────────────────────────────────────────────────────────┘

  PS> npm run start

Luego prueba el endpoint:

  http://localhost:3000/api/dashboard/executive-summary

Si falla localmente, verás el error EXACTO en la consola


═══════════════════════════════════════════════════════════════════
  🔍 QUÉ BUSCAR EN EL DIAGNÓSTICO
═══════════════════════════════════════════════════════════════════

ERRORES COMUNES:

❌ "relation 'Sale' does not exist"
   → Falta la tabla Sale
   → Migración no se aplicó

❌ "column 'paidAmount' does not exist"
   → Falta columna en alguna tabla
   → Migración incompleta

❌ "Cannot reach database server"
   → DATABASE_URL incorrecta
   → Firewall bloqueando

❌ "null value in column"
   → Datos con NULL donde no se espera
   → Necesita UPDATE en BD


═══════════════════════════════════════════════════════════════════
  ⚠️  PRECAUCIONES IMPORTANTES
═══════════════════════════════════════════════════════════════════

MIENTRAS ESTÉS CONECTADO A PRODUCCIÓN:

  ❌ NO ejecutar: npx prisma migrate reset
  ❌ NO ejecutar: npx prisma db push --force-reset
  ❌ NO borrar datos manualmente
  ❌ NO ejecutar scripts de prueba que inserten/borren

  ✅ SÍ puedes: SELECT (consultas)
  ✅ SÍ puedes: node diagnose-dashboard.js
  ✅ SÍ puedes: npx prisma studio (solo lectura)
  ✅ SÍ puedes: npm run start (para probar)


═══════════════════════════════════════════════════════════════════
  🔄 VOLVER A BD LOCAL
═══════════════════════════════════════════════════════════════════

OPCIÓN 1: Con script
  PS> .\switch-database.ps1
  Seleccionar [2] Conectar a LOCAL

OPCIÓN 2: Manual
  PS> Copy-Item .env.backup .env
  PS> Remove-Item .env.backup


═══════════════════════════════════════════════════════════════════
  📊 EJEMPLO DE DIAGNÓSTICO EXITOSO
═══════════════════════════════════════════════════════════════════

PS> node diagnose-dashboard.js

═══════════════════════════════════════════════════════
  🔍 DIAGNÓSTICO DE BASE DE DATOS - DASHBOARD
═══════════════════════════════════════════════════════

DATABASE_URL: ✓ Configurada

═══════════════════════════════════════════════════════
  1. PRUEBA DE CONEXIÓN A BASE DE DATOS
═══════════════════════════════════════════════════════
✓ Conexión exitosa a la base de datos

═══════════════════════════════════════════════════════
  2. VERIFICAR TABLAS EXISTENTES
═══════════════════════════════════════════════════════
✓ Encontradas 28 tablas:
  - CashClosing
  - Expense
  - Product
  - Sale
  - SaleDetail
  ...

═══════════════════════════════════════════════════════
  3. PRUEBA: TABLA SALE (Ventas)
═══════════════════════════════════════════════════════
✓ Tabla Sale: 1250 registros

═══════════════════════════════════════════════════════
  7. PRUEBA: CONSULTA COMPLETA DEL DASHBOARD
═══════════════════════════════════════════════════════
Ejecutando consultas del dashboard...
  ✓ Ventas de hoy: 15
  ✓ Ventas del mes: 340
  ✓ Gastos del mes: 89
  ✓ Productos: 450

RESUMEN:
  Ventas hoy: $1,250.00
  Ventas mes: $45,678.90
  Gastos mes: $12,345.67
  Utilidad mes: $33,333.23

═══════════════════════════════════════════════════════
  RESUMEN DE DIAGNÓSTICO
═══════════════════════════════════════════════════════
✓ connection
✓ tables
✓ sales
✓ expenses
✓ products
✗ dashboard  ← ⚠️ AQUÍ ESTÁ EL PROBLEMA

Error en dashboard:
  "Cannot read property 'kpis' of undefined"
  En línea: capitalService.getCapitalSummary()


═══════════════════════════════════════════════════════
  📝 COMANDOS ÚTILES
═══════════════════════════════════════════════════════

# Diagnóstico completo
PS> node diagnose-dashboard.js

# Ver datos en interfaz web
PS> npx prisma studio

# Probar endpoint localmente
PS> npm run start
# Luego en navegador: http://localhost:3000/api/dashboard/executive-summary

# Ver estructura de tabla específica
PS> npx prisma db execute --stdin
SELECT column_name, data_type 
FROM information_schema.columns 
WHERE table_name = 'Sale';

# Contar registros
PS> npx prisma db execute --stdin
SELECT 
  (SELECT COUNT(*) FROM "Sale") as ventas,
  (SELECT COUNT(*) FROM "Expense") as gastos,
  (SELECT COUNT(*) FROM "Product") as productos;


═══════════════════════════════════════════════════════
  🎯 FLUJO RECOMENDADO
═══════════════════════════════════════════════════════

1. Ejecutar switch-database.ps1
   └─> Seleccionar [1] PRODUCCIÓN

2. Ejecutar diagnose-dashboard.js
   └─> Ver qué prueba falla (✗)

3. Si necesitas, ejecutar npm run start
   └─> Ver error detallado en consola

4. Identificar el problema

5. Ejecutar switch-database.ps1
   └─> Seleccionar [2] LOCAL

6. Aplicar fix en código

7. Push a Railway


═══════════════════════════════════════════════════════

¡Listo! Ahora ejecuta:

  PS> .\switch-database.ps1

Y selecciona [1] para conectar a PRODUCCIÓN

═══════════════════════════════════════════════════════
