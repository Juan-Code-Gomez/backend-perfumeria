┌─────────────────────────────────────────────────────────────────┐
│  🚂 RAILWAY AUTO-DEPLOYMENT - GUÍA VISUAL                      │
│  Deployment Continuo para Múltiples Clientes                   │
└─────────────────────────────────────────────────────────────────┘

═══════════════════════════════════════════════════════════════════
  ⚡ RESPUESTA ULTRA RÁPIDA
═══════════════════════════════════════════════════════════════════

¿Tengo que ejecutar algo manualmente en cada cliente?

  ❌ NO

¿Todo se ejecuta automáticamente?

  ✅ SÍ - Con git push origin main


═══════════════════════════════════════════════════════════════════
  🎯 CONFIGURACIÓN REALIZADA
═══════════════════════════════════════════════════════════════════

Archivos creados/modificados:

  ✅ railway-auto-deploy.js       - Script inteligente de deployment
  ✅ railway.json                 - Configuración de Railway
  ✅ package.json                 - Scripts actualizados
  ✅ verify-railway-setup.js      - Verificador pre-push
  ✅ RAILWAY-AUTO-DEPLOY.md       - Documentación completa


═══════════════════════════════════════════════════════════════════
  🚀 FLUJO AUTOMÁTICO
═══════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────┐
│  PASO 1: TÚ (Desarrollo Local)                                  │
└─────────────────────────────────────────────────────────────────┘

  1. Editar código o schema.prisma
     
  2. Si cambias schema, crear migración:
     $ npx prisma migrate dev --name mi_cambio
     
  3. Git commit y push:
     $ git add .
     $ git commit -m "Nueva funcionalidad"
     $ git push origin main
     
  ✅ Tu parte termina aquí


┌─────────────────────────────────────────────────────────────────┐
│  PASO 2: RAILWAY (Automático en TODOS los clientes)             │
└─────────────────────────────────────────────────────────────────┘

  Railway detecta push a main
     ↓
  Ejecuta en CADA proyecto:
     │
     ├─→ Build:  npm run build
     │   └─→ Compila TypeScript → JavaScript
     │
     ├─→ Start:  npm run railway:start
     │   └─→ Ejecuta: railway-auto-deploy.js
     │       │
     │       ├─→ ¿BD nueva o existente?
     │       │
     │       ├─[NUEVA]────→ Aplica TODAS las migraciones
     │       │
     │       ├─[EXISTENTE]→ 1. Marca baseline (si es 1ra vez)
     │       │             2. Aplica solo migraciones NUEVAS
     │       │
     │       ├─→ Genera Prisma Client
     │       │
     │       └─→ Inicia aplicación (node dist/src/main.js)
     │
     └─→ ✅ Cliente actualizado y corriendo


═══════════════════════════════════════════════════════════════════
  📊 EJEMPLO CON 5 CLIENTES
═══════════════════════════════════════════════════════════════════

Situación:
  - Cliente A: En producción (BD existente)
  - Cliente B: En producción (BD existente)
  - Cliente C: En producción (BD existente)
  - Cliente D: Nuevo (BD vacía)
  - Cliente E: En producción (BD existente)


TÚ HACES:
  $ git push origin main


RAILWAY EJECUTA EN PARALELO:

  ┌─────────────────┐
  │   Cliente A     │ → Marca baseline → Aplica nuevas → ✅
  └─────────────────┘

  ┌─────────────────┐
  │   Cliente B     │ → Marca baseline → Aplica nuevas → ✅
  └─────────────────┘

  ┌─────────────────┐
  │   Cliente C     │ → Marca baseline → Aplica nuevas → ✅
  └─────────────────┘

  ┌─────────────────┐
  │   Cliente D     │ → Aplica TODAS → ✅ (BD nueva)
  └─────────────────┘

  ┌─────────────────┐
  │   Cliente E     │ → Marca baseline → Aplica nuevas → ✅
  └─────────────────┘

  Tiempo total: ~2-3 minutos (todos en paralelo)


═══════════════════════════════════════════════════════════════════
  🔍 QUÉ HACE railway-auto-deploy.js
═══════════════════════════════════════════════════════════════════

El script es INTELIGENTE y se adapta a cada cliente:

┌─────────────────────────────────────────────────────────────────┐
│  PARA CLIENTES EXISTENTES (tienen datos)                        │
└─────────────────────────────────────────────────────────────────┘

  1. Consulta tabla _prisma_migrations
  2. ¿Existe baseline?
     
     NO → Marca baseline como aplicado
          (Le dice a Prisma: "Este schema ya está aquí")
     
     SÍ → Continúa al siguiente paso
  
  3. Aplica solo migraciones NUEVAS (posteriores al baseline)
  4. Genera Prisma Client
  5. Inicia aplicación
  
  ✅ Resultado: Cliente actualizado SIN perder datos


┌─────────────────────────────────────────────────────────────────┐
│  PARA CLIENTES NUEVOS (BD vacía)                                │
└─────────────────────────────────────────────────────────────────┘

  1. Detecta que _prisma_migrations no existe o está vacía
  2. Aplica TODAS las migraciones (baseline + nuevas)
  3. Genera Prisma Client
  4. Inicia aplicación
  
  ✅ Resultado: Cliente nuevo con schema completo


═══════════════════════════════════════════════════════════════════
  📝 COMANDOS DISPONIBLES
═══════════════════════════════════════════════════════════════════

Verificar antes de push:
  $ node verify-railway-setup.js

Crear nueva migración (desarrollo):
  $ npx prisma migrate dev --name descripcion_cambio

Ver estado de migraciones:
  $ npx prisma migrate status

Push a producción:
  $ git push origin main


═══════════════════════════════════════════════════════════════════
  ✅ VENTAJAS DEL SISTEMA
═══════════════════════════════════════════════════════════════════

┌────────────────────────┬────────────────┬──────────────────────┐
│ Característica         │ Antes          │ Ahora                │
├────────────────────────┼────────────────┼──────────────────────┤
│ Actualizar 5 clientes  │ 1 hora manual  │ 1 push (3 minutos)   │
├────────────────────────┼────────────────┼──────────────────────┤
│ Posibilidad de errores │ Alta           │ Ninguna              │
├────────────────────────┼────────────────┼──────────────────────┤
│ Consistencia           │ Manual         │ Automática           │
├────────────────────────┼────────────────┼──────────────────────┤
│ Rollback               │ Complicado     │ git revert + push    │
├────────────────────────┼────────────────┼──────────────────────┤
│ Nuevos clientes        │ Setup manual   │ Automático           │
├────────────────────────┼────────────────┼──────────────────────┤
│ Downtime               │ Variable       │ Mínimo (~30s)        │
└────────────────────────┴────────────────┴──────────────────────┘


═══════════════════════════════════════════════════════════════════
  🎯 PRÓXIMOS PASOS
═══════════════════════════════════════════════════════════════════

1. Verificar configuración:
   $ node verify-railway-setup.js

2. Hacer commit de estos cambios:
   $ git add .
   $ git commit -m "feat: Railway auto-deployment system"

3. Push a main:
   $ git push origin main

4. Ir a Railway Dashboard y ver los deployments:
   - Cada proyecto mostrará el deployment en progreso
   - Ver logs en tiempo real
   - Confirmar: "DEPLOYMENT COMPLETADO EXITOSAMENTE"

5. Verificar cada cliente:
   - Acceder a la URL de cada aplicación
   - Probar funcionalidades
   - ✅ Confirmar que todo funciona


═══════════════════════════════════════════════════════════════════
  🆘 TROUBLESHOOTING
═══════════════════════════════════════════════════════════════════

Ver logs de deployment en Railway:
  1. Railway Dashboard
  2. Seleccionar proyecto
  3. Tab "Deployments"
  4. Click en el último deployment
  5. Ver logs

Buscar en logs:
  ✅ "RAILWAY AUTO-DEPLOYMENT - PRISMA MIGRATIONS"
  ✅ "Base de datos EXISTENTE detectada"
  ✅ "Aplicando migraciones pendientes"
  ✅ "DEPLOYMENT COMPLETADO EXITOSAMENTE"

Si falla:
  ❌ Buscar líneas con "Error" o "Failed"
  ❌ Verificar DATABASE_URL en variables de Railway
  ❌ Verificar que migraciones existan en repositorio
  ❌ Trigger manual: Railway → Redeploy


═══════════════════════════════════════════════════════════════════
  📊 CONFIGURACIÓN EN RAILWAY (UI)
═══════════════════════════════════════════════════════════════════

Para cada proyecto en Railway:

┌─────────────────────────────────────────────────────────────────┐
│  Settings → Variables                                            │
└─────────────────────────────────────────────────────────────────┘
  
  DATABASE_URL=postgresql://user:pass@host:port/database
  NODE_ENV=production


┌─────────────────────────────────────────────────────────────────┐
│  Settings → Deploy (Railway detecta automáticamente)             │
└─────────────────────────────────────────────────────────────────┘
  
  ✅ Build Command:  npm run build
  ✅ Start Command:  npm run railway:start
  ✅ Watch Paths:    Todos los archivos


┌─────────────────────────────────────────────────────────────────┐
│  Settings → Source                                               │
└─────────────────────────────────────────────────────────────────┘
  
  ✅ Repository:     Tu repositorio de GitHub
  ✅ Branch:         main
  ✅ Auto-deploy:    ✓ Enabled


═══════════════════════════════════════════════════════════════════
  🎉 RESUMEN FINAL
═══════════════════════════════════════════════════════════════════

TODO ESTÁ LISTO ✅

Cuando hagas:
  $ git push origin main

Railway automáticamente:
  ✅ Detecta el push
  ✅ Compila el código
  ✅ Ejecuta railway-auto-deploy.js en CADA cliente
  ✅ Aplica migraciones automáticamente
  ✅ Reinicia las aplicaciones
  ✅ TODO actualizado en 2-3 minutos

¡NO NECESITAS HACER NADA MÁS! 🚀


═══════════════════════════════════════════════════════════════════

Versión: 2.0 Railway Auto-Deploy
Estado: ✅ Configurado y listo
Fecha: 2025-10-25
Compatibilidad: Railway, Render, Heroku, cualquier PaaS

═══════════════════════════════════════════════════════════════════
