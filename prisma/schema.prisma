generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[] // relación inversa
}

model Product {
  id              Int              @id @default(autoincrement())
  name            String
  description     String
  unit            String
  stock           Int
  cost            Float
  pricePerUnit    Float
  price           Float
  categoryId      Int
  purchaseDetails PurchaseDetail[]
  salesDetail     SaleDetail[]
  category        Category         @relation(fields: [categoryId], references: [id]) // relación directa
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Supplier {
  id        Int        @id @default(autoincrement())
  name      String
  nit       String     @unique
  phone     String?
  email     String?
  address   String?
  purchases Purchase[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Purchase {
  id          Int              @id @default(autoincrement())
  supplierId  Int
  supplier    Supplier         @relation(fields: [supplierId], references: [id])
  date        DateTime         @default(now())
  totalAmount Float
  paidAmount  Float
  isPaid      Boolean          @default(false)
  details     PurchaseDetail[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model PurchaseDetail {
  id         Int      @id @default(autoincrement())
  purchaseId Int
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Float
  unitCost   Float
  totalCost  Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Sale {
  id           Int          @id @default(autoincrement())
  date         DateTime     @default(now())
  customerName String?
  totalAmount  Float
  paidAmount   Float
  isPaid       Boolean      @default(false)
  details      SaleDetail[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model SaleDetail {
  id         Int      @id @default(autoincrement())
  saleId     Int
  sale       Sale     @relation(fields: [saleId], references: [id])
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Float
  unitPrice  Float
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
