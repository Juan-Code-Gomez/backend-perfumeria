generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int                      @id @default(autoincrement())
  username                  String                   @unique
  password                  String
  name                      String
  isActive                  Boolean                  @default(true)
  roles                     UserRole[]
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  cashClosings              CashClosing[]            @relation("UserCashClosings")
  
  // FASE 3: Relaciones de notificaciones
  notifications             Notification[]
  notificationPreferences   NotificationPreference?  @relation("NotificationPreferences")
}

model Role {
  id          Int                @id @default(autoincrement())
  name        String             @unique
  description String?
  users       UserRole[]
  permissions ModulePermission[]
}

model UserRole {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@id([userId, roleId])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  color       String?   // Color para UI
  icon        String?   // Icono para UI
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Unit {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  symbol      String?   // Símbolo de la unidad (ml, g, und, etc.)
  description String?   // Descripción de la unidad
  unitType    String?   // Tipo: VOLUME, WEIGHT, QUANTITY, etc.
  isActive    Boolean   @default(true)
  isDecimal   Boolean   @default(true) // Si permite decimales
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id                Int                @id @default(autoincrement())
  name              String
  description       String?
  
  // Identificación y códigos
  sku               String?            @unique
  barcode           String?
  fragranceName     String?            // Nombre de la fragancia (para agrupar esencias y perfumes 1.1)
  
  // Categorización y relaciones básicas
  categoryId        Int
  category          Category           @relation(fields: [categoryId], references: [id])
  unitId            Int
  unit              Unit               @relation(fields: [unitId], references: [id])
  
  // Información del producto
  productType       String             @default("SIMPLE") // SIMPLE, VARIANT, COMPOSITE
  salesType         String             @default("VENTA") // VENTA, INSUMO, COMBO
  size              String?            // "1 oz", "2 oz", "100ml", etc.
  sizeValue         Float?             // Valor numérico del tamaño
  brand             String?            // Marca del producto
  gender            String?            // MASCULINO, FEMENINO, UNISEX
  
  // Variantes y productos padre/hijo
  hasVariants       Boolean            @default(false)
  parentProductId   Int?               // Para variantes (esencia vs perfume 1.1)
  parentProduct     Product?           @relation("ProductVariants", fields: [parentProductId], references: [id])
  variants          Product[]          @relation("ProductVariants")
  variantType       String?            // ESENCIA, PERFUME_11, SPLASH, etc.
  
  // Productos compuestos (esencia + frasco + accesorios)
  isComposite       Boolean            @default(false)
  requiresPreparation Boolean          @default(false) // Para esencias que se preparan
  components        ProductComponent[] @relation("ProductComponents")
  usedInProducts    ProductComponent[] @relation("ComponentProducts")
  
  // Inventario
  stock             Float
  minStock          Float?
  
  // Precios
  purchasePrice     Float
  salePrice         Float              // Precio base
  suggestedPrice    Float?             // Precio sugerido
  minPrice          Float?             // Precio mínimo
  maxPrice          Float?             // Precio máximo
  priceHistory      ProductPrice[]
  
  // Proveedor
  supplierId        Int?
  supplier          Supplier?          @relation(fields: [supplierId], references: [id])
  supplierCode      String?            // Código del producto en el proveedor
  
  // Metadatos
  imageUrl          String?
  notes             String?
  tags              String[]           // Tags para búsqueda
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Relaciones existentes
  ProductMovement   ProductMovement[]
  PurchaseDetail    PurchaseDetail[]
  SaleDetail        SaleDetail[]
  creditNoteDetails CreditNoteDetail[]

  @@index([sku])
  @@index([barcode])
  @@index([fragranceName])
  @@index([productType])
  @@index([parentProductId])
  @@index([supplierId])
  @@index([brand])
  @@index([tags])
}

model Supplier {
  id                Int        @id @default(autoincrement())
  name              String
  nit               String     @unique
  phone             String?
  email             String?
  address           String?
  contactPerson     String?    // Persona de contacto
  website           String?    // Sitio web del proveedor
  
  // Información comercial
  paymentTerms      String?    // "CONTADO", "30_DIAS", "45_DIAS", "60_DIAS"
  creditLimit       Float?     // Límite de crédito
  currentDebt       Float      @default(0) // Deuda actual
  supplierType      String?    // "ESENCIAS", "FRASCOS", "ORIGINALES", "MIXTO"
  
  // Categorías que maneja este proveedor
  specializedCategories String[] // Array de IDs o nombres de categorías
  
  // Estado y configuración
  isActive          Boolean    @default(true)
  isPreferred       Boolean   @default(false) // Proveedor preferido
  minOrderAmount    Float?     // Monto mínimo de pedido
  leadTimeDays      Int?       // Días de entrega
  
  // Calificación y notas
  rating            Float?     // Calificación de 1 a 5
  notes             String?    // Notas adicionales
  
  purchases         Purchase[]
  products          Product[]  // Productos de este proveedor
  productPrices     ProductPrice[] // Historial de precios
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

// Modelo para componentes de productos compuestos
model ProductComponent {
  id                  Int      @id @default(autoincrement())
  productId           Int      // Producto principal (compuesto)
  product             Product  @relation("ProductComponents", fields: [productId], references: [id], onDelete: Cascade)
  componentProductId  Int      // Producto componente
  componentProduct    Product  @relation("ComponentProducts", fields: [componentProductId], references: [id], onDelete: Cascade)
  quantity            Float    @default(1) // Cantidad del componente necesaria
  isOptional          Boolean  @default(false) // Si es opcional
  notes               String?  // Notas específicas del componente
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([productId, componentProductId])
  @@index([productId])
  @@index([componentProductId])
}

// Modelo para historial de precios
model ProductPrice {
  id              Int       @id @default(autoincrement())
  productId       Int
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  purchasePrice   Float?    // Precio de compra
  salePrice       Float?    // Precio de venta
  suggestedPrice  Float?    // Precio sugerido
  supplierId      Int?      // Proveedor asociado a este precio
  supplier        Supplier? @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  effectiveDate   DateTime  @default(now()) // Fecha efectiva del precio
  isActive        Boolean   @default(true) // Si está activo
  notes           String?   // Notas sobre el cambio de precio
  createdAt       DateTime  @default(now())

  @@index([productId])
  @@index([supplierId])
  @@index([effectiveDate])
  @@index([isActive])
}

model Purchase {
  id          Int              @id @default(autoincrement())
  supplierId  Int
  supplier    Supplier         @relation(fields: [supplierId], references: [id])
  date        DateTime         @default(now())
  totalAmount Float
  paidAmount  Float
  isPaid      Boolean          @default(false)
  details     PurchaseDetail[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model PurchaseDetail {
  id         Int      @id @default(autoincrement())
  purchaseId Int
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Float
  unitCost   Float
  totalCost  Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Client {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String?
  email     String?
  document  String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sales Sale[]
}

model Sale {
  id            Int           @id @default(autoincrement())
  date          DateTime      @default(now())
  customerName  String?
  totalAmount   Float
  paidAmount    Float
  clientId      Int?
  client        Client?       @relation(fields: [clientId], references: [id])
  paymentMethod String?
  isPaid        Boolean       @default(false)
  details       SaleDetail[]
  payments      SalePayment[]
  creditNote    CreditNote? // inversa sin @relation
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model SaleDetail {
  id            Int      @id @default(autoincrement())
  saleId        Int
  sale          Sale     @relation(fields: [saleId], references: [id])
  productId     Int
  product       Product  @relation(fields: [productId], references: [id])
  quantity      Float
  unitPrice     Float    // Precio de venta real (variable por regateo/sobreprecio)
  totalPrice    Float    // unitPrice * quantity
  purchasePrice Float    // Precio de compra al momento de la venta
  profitAmount  Float    // Ganancia real = unitPrice - purchasePrice
  profitMargin  Float    // Margen % real = (profitAmount / purchasePrice) * 100
  suggestedPrice Float?  // Precio sugerido original del producto
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ProductMovement {
  id        Int          @id @default(autoincrement())
  productId Int
  product   Product      @relation(fields: [productId], references: [id])
  type      MovementType
  quantity  Float
  reason    String?      // Razón del movimiento
  notes     String?      // Notas adicionales
  createdAt DateTime     @default(now())
}

enum MovementType {
  IN
  OUT
  ADJUST
}

model CashClosing {
  id            Int      @id @default(autoincrement())
  date          DateTime @unique
  openingCash   Float
  closingCash   Float
  systemCash    Float
  difference    Float
  totalSales    Float
  cashSales     Float
  cardSales     Float
  transferSales Float
  creditSales   Float
  totalIncome   Float
  totalExpense  Float
  totalPayments Float
  notes         String?
  createdAt     DateTime @default(now())
  createdById   Int?
  createdBy     User?    @relation("UserCashClosings", fields: [createdById], references: [id])
}

enum ExpenseCategory {
  SERVICIOS
  SUMINISTROS
  ALQUILER
  OTRO
}

model Expense {
  id                 Int               @id @default(autoincrement())
  date               DateTime          @default(now())
  amount             Float
  description        String
  category           ExpenseCategory
  paymentMethod      String?
  notes              String?
  recurringExpenseId Int?
  recurringExpense   RecurringExpense? @relation("RecurringExpenses", fields: [recurringExpenseId], references: [id])
  deletedAt          DateTime?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
}

model SalePayment {
  id        Int      @id @default(autoincrement())
  saleId    Int
  sale      Sale     @relation(fields: [saleId], references: [id])
  amount    Float
  date      DateTime @default(now())
  method    String?
  note      String?
  createdAt DateTime @default(now())
}

model CreditNote {
  id          Int                @id @default(autoincrement())
  saleId      Int                @unique
  sale        Sale               @relation(fields: [saleId], references: [id])
  date        DateTime           @default(now())
  totalAmount Float
  details     CreditNoteDetail[]
  createdAt   DateTime           @default(now())
}

model CreditNoteDetail {
  id           Int        @id @default(autoincrement())
  creditNoteId Int
  creditNote   CreditNote @relation(fields: [creditNoteId], references: [id])
  productId    Int
  product      Product    @relation(fields: [productId], references: [id])
  quantity     Float
  unitPrice    Float
  totalPrice   Float
}

model RecurringExpense {
  id            Int             @id @default(autoincrement())
  concept       String // e.g. "Arriendo oficina"
  amount        Float // e.g. 1875000
  category      ExpenseCategory
  paymentMethod String // e.g. "Transferencia", "Efectivo"
  notes         String? // opcional
  daysOfMonth   Int[] // lista de días del mes: [1], o [1,15]
  createdAt     DateTime        @default(now())
  expenses      Expense[]       @relation("RecurringExpenses")
}

// FASE 3: Sistema de Notificaciones Inteligentes
model Notification {
  id          Int              @id @default(autoincrement())
  title       String
  message     String
  type        NotificationType
  priority    NotificationPriority @default(NORMAL)
  category    String           // "STOCK", "VENCIMIENTO", "PAGOS", "VENTAS", "INVENTARIO"
  
  // Datos contextuales
  relatedId   Int?             // ID del objeto relacionado (producto, venta, etc.)
  relatedType String?          // "PRODUCT", "SALE", "PURCHASE", "EXPENSE"
  metadata    Json?            // Datos adicionales en JSON
  
  // Estado
  isRead      Boolean          @default(false)
  isArchived  Boolean          @default(false)
  
  // Dirigida a usuario específico o broadcast
  userId      Int?
  user        User?            @relation(fields: [userId], references: [id])
  
  // Programación automática
  autoGenerated Boolean        @default(false)
  ruleId        Int?
  rule          NotificationRule? @relation(fields: [ruleId], references: [id])
  
  createdAt   DateTime         @default(now())
  readAt      DateTime?
  archivedAt  DateTime?
}

model NotificationRule {
  id            Int                    @id @default(autoincrement())
  name          String                 // "Stock Bajo Crítico", "Vencimiento Próximo"
  description   String?
  
  // Tipo de regla
  triggerType   NotificationTrigger    // "STOCK_LOW", "EXPIRY_SOON", "PAYMENT_DUE", etc.
  category      String                 // "STOCK", "VENCIMIENTO", "PAGOS"
  
  // Configuración de la regla
  conditions    Json                   // Condiciones específicas en JSON
  isActive      Boolean                @default(true)
  
  // Configuración de usuarios
  targetUsers   Int[]                  // IDs de usuarios que reciben las notificaciones
  
  // Configuración de frecuencia
  frequency     NotificationFrequency  @default(IMMEDIATE)
  lastTriggered DateTime?
  
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  notifications Notification[]
}

model NotificationPreference {
  id                 Int      @id @default(autoincrement())
  userId             Int      @unique
  user               User     @relation("NotificationPreferences", fields: [userId], references: [id])
  
  // Preferencias por categoría
  stockAlerts        Boolean  @default(true)
  expiryAlerts       Boolean  @default(true)
  paymentAlerts      Boolean  @default(true)
  salesAlerts        Boolean  @default(false)
  inventoryAlerts    Boolean  @default(true)
  
  // Configuración de frecuencia
  emailEnabled       Boolean  @default(false)
  pushEnabled        Boolean  @default(true)
  
  // Horarios de notificación
  quietHoursStart    String?  // "22:00"
  quietHoursEnd      String?  // "08:00"
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

enum NotificationTrigger {
  STOCK_LOW
  STOCK_CRITICAL
  STOCK_OUT
  EXPIRY_SOON
  EXPIRY_TODAY
  PAYMENT_DUE
  PAYMENT_OVERDUE
  SALE_GOAL
  INVENTORY_VALUE_CHANGE
  PRODUCT_NO_MOVEMENT
  RECURRING_EXPENSE_DUE
}

enum NotificationFrequency {
  IMMEDIATE
  HOURLY
  DAILY
  WEEKLY
}

// Modelo para gestión de capital (efectivo y banco)
model Capital {
  id              Int      @id @default(autoincrement())
  cash            Float    @default(0)    // Dinero en efectivo
  bank            Float    @default(0)    // Dinero en banco
  description     String?  // Descripción del registro
  date            DateTime @default(now()) // Fecha del registro
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([date])
}

// Modelo para historial de movimientos de capital
model CapitalMovement {
  id              Int      @id @default(autoincrement())
  type            String   // INGRESO, EGRESO
  amount          Float    // Monto del movimiento
  description     String   // Descripción del movimiento
  category        String   // VENTA, PROVEEDOR, GASTO, OTRO
  paymentMethod   String   // EFECTIVO, TRANSFERENCIA, TARJETA
  cashBefore      Float?   // Capital en efectivo antes del movimiento
  bankBefore      Float?   // Capital en banco antes del movimiento
  cashAfter       Float?   // Capital en efectivo después del movimiento
  bankAfter       Float?   // Capital en banco después del movimiento
  saleId          Int?     // Referencia a venta (si aplica)
  invoiceId       Int?     // Referencia a factura (si aplica)
  expenseId       Int?     // Referencia a gasto (si aplica)
  date            DateTime @default(now())
  createdAt       DateTime @default(now())
  
  @@index([type])
  @@index([category])
  @@index([date])
}

// Modelo para gestión de facturas
model Invoice {
  id              Int      @id @default(autoincrement())
  invoiceNumber   String   @unique // Número de la factura
  supplierName    String   // Nombre del proveedor
  amount          Float    // Monto total de la factura
  paidAmount      Float    @default(0) // Monto pagado
  status          String   @default("PENDING") // PENDING, PARTIAL, PAID
  description     String?  // Descripción de la factura
  invoiceDate     DateTime // Fecha de la factura
  dueDate         DateTime? // Fecha de vencimiento
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([status])
  @@index([invoiceDate])
  @@index([dueDate])
}

// Configuración de la empresa
model CompanyConfig {
  id                    Int      @id @default(autoincrement())
  companyName          String   // Nombre de la empresa
  nit                  String?  // NIT de la empresa
  address              String?  // Dirección
  phone                String?  // Teléfono
  email                String?  // Email
  website              String?  // Sitio web
  logo                 String?  // URL del logo
  
  // Configuración de facturación
  invoicePrefix        String?  // Prefijo de facturas (ej: "FACT-")
  invoiceFooter        String?  // Pie de página de facturas
  taxRate              Float?   @default(0) // Tasa de impuesto por defecto
  currency             String   @default("COP") // Moneda
  
  // Configuración POS
  posReceiptHeader     String?  // Encabezado del recibo POS
  posReceiptFooter     String?  // Pie de página del recibo POS
  printLogo            Boolean  @default(false) // Imprimir logo en recibos
  
  // Configuración del sistema
  timezone             String   @default("America/Bogota") // Zona horaria
  dateFormat           String   @default("DD/MM/YYYY") // Formato de fecha
  numberFormat         String   @default("es-CO") // Formato de números
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  @@map("company_config")
}

// Módulos del sistema
model SystemModule {
  id            Int                 @id @default(autoincrement())
  name          String              @unique // Nombre del módulo (ej: "products", "sales")
  displayName   String              // Nombre para mostrar
  description   String?             // Descripción del módulo
  route         String?             // Ruta del módulo
  icon          String?             // Icono del módulo
  isActive      Boolean             @default(true)
  order         Int                 @default(0) // Orden en el menú
  parentId      Int?                // Para módulos anidados
  parent        SystemModule?       @relation("ModuleHierarchy", fields: [parentId], references: [id])
  children      SystemModule[]      @relation("ModuleHierarchy")
  permissions   ModulePermission[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  @@map("system_modules")
}

// Permisos de módulos por rol
model ModulePermission {
  id            Int                 @id @default(autoincrement())
  moduleId      Int
  roleId        Int
  canView       Boolean             @default(false) // Puede ver el módulo
  canCreate     Boolean             @default(false) // Puede crear registros
  canEdit       Boolean             @default(false) // Puede editar registros
  canDelete     Boolean             @default(false) // Puede eliminar registros
  canExport     Boolean             @default(false) // Puede exportar datos
  customData    Json?               // Permisos personalizados en formato JSON
  
  module        SystemModule        @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  role          Role                @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  @@unique([moduleId, roleId])
  @@map("module_permissions")
}
