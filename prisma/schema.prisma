generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                     @id @default(autoincrement())
  username                String                  @unique
  password                String
  name                    String
  companyCode             String?                 // CÃ³digo de empresa para multi-tenant
  isActive                Boolean                 @default(true)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  cashClosings            CashClosing[]           @relation("UserCashClosings")
  notifications           Notification[]
  notificationPreferences NotificationPreference? @relation("NotificationPreferences")
  roles                   UserRole[]
}

model Role {
  id          Int                @id @default(autoincrement())
  name        String             @unique
  description String?
  users       UserRole[]
  permissions ModulePermission[]
}

model UserRole {
  userId Int
  roleId Int
  role   Role @relation(fields: [roleId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  createdAt   DateTime  @default(now())
  description String?
  isActive    Boolean   @default(true)
  updatedAt   DateTime  @updatedAt
  color       String?
  icon        String?
  products    Product[]
}

model Unit {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  symbol      String?
  createdAt   DateTime  @default(now())
  description String?
  isActive    Boolean   @default(true)
  isDecimal   Boolean   @default(true)
  unitType    String?
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id                  Int                @id @default(autoincrement())
  name                String
  description         String?
  categoryId          Int
  unitId              Int
  stock               Float
  minStock            Float?
  purchasePrice       Float
  salePrice           Float
  imageUrl            String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  isActive            Boolean            @default(true)
  barcode             String?
  brand               String?
  fragranceName       String?
  gender              String?
  hasVariants         Boolean            @default(false)
  isComposite         Boolean            @default(false)
  maxPrice            Float?
  minPrice            Float?
  notes               String?
  parentProductId     Int?
  productType         String             @default("SIMPLE")
  requiresPreparation Boolean            @default(false)
  size                String?
  sizeValue           Float?
  sku                 String?            @unique
  suggestedPrice      Float?
  supplierCode        String?
  supplierId          Int?
  tags                String[]
  variantType         String?
  salesType           String             @default("VENTA")
  creditNoteDetails   CreditNoteDetail[]
  InvoiceItem         InvoiceItem[]
  category            Category           @relation(fields: [categoryId], references: [id])
  parentProduct       Product?           @relation("ProductVariants", fields: [parentProductId], references: [id])
  variants            Product[]          @relation("ProductVariants")
  supplier            Supplier?          @relation(fields: [supplierId], references: [id])
  unit                Unit               @relation(fields: [unitId], references: [id])
  usedInProducts      ProductComponent[] @relation("ComponentProducts")
  components          ProductComponent[] @relation("ProductComponents")
  ProductMovement     ProductMovement[]
  priceHistory        ProductPrice[]
  PurchaseDetail      PurchaseDetail[]
  SaleDetail          SaleDetail[]

  @@index([sku])
  @@index([barcode])
  @@index([fragranceName])
  @@index([productType])
  @@index([parentProductId])
  @@index([supplierId])
  @@index([brand])
  @@index([tags])
}

model Supplier {
  id                    Int            @id @default(autoincrement())
  name                  String
  nit                   String         @unique
  phone                 String?
  email                 String?
  address               String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  contactPerson         String?
  creditLimit           Float?
  currentDebt           Float          @default(0)
  isActive              Boolean        @default(true)
  isPreferred           Boolean        @default(false)
  leadTimeDays          Int?
  minOrderAmount        Float?
  notes                 String?
  paymentTerms          String?
  rating                Float?
  specializedCategories String[]
  supplierType          String?
  website               String?
  Invoice               Invoice[]
  products              Product[]
  productPrices         ProductPrice[]
  purchases             Purchase[]
}

model ProductComponent {
  id                 Int      @id @default(autoincrement())
  productId          Int
  componentProductId Int
  quantity           Float    @default(1)
  isOptional         Boolean  @default(false)
  notes              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  componentProduct   Product  @relation("ComponentProducts", fields: [componentProductId], references: [id], onDelete: Cascade)
  product            Product  @relation("ProductComponents", fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, componentProductId])
  @@index([productId])
  @@index([componentProductId])
}

model ProductPrice {
  id             Int       @id @default(autoincrement())
  productId      Int
  purchasePrice  Float?
  salePrice      Float?
  suggestedPrice Float?
  supplierId     Int?
  effectiveDate  DateTime  @default(now())
  isActive       Boolean   @default(true)
  notes          String?
  createdAt      DateTime  @default(now())
  product        Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  supplier       Supplier? @relation(fields: [supplierId], references: [id])

  @@index([productId])
  @@index([supplierId])
  @@index([effectiveDate])
  @@index([isActive])
}

model Purchase {
  id          Int              @id @default(autoincrement())
  supplierId  Int
  date        DateTime         @default(now())
  totalAmount Float
  paidAmount  Float
  isPaid      Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  supplier    Supplier         @relation(fields: [supplierId], references: [id])
  details     PurchaseDetail[]
}

model PurchaseDetail {
  id         Int      @id @default(autoincrement())
  purchaseId Int
  productId  Int
  quantity   Float
  unitCost   Float
  totalCost  Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id])
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
}

model Client {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String?
  email     String?
  document  String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sales     Sale[]
}

model Sale {
  id            Int           @id @default(autoincrement())
  date          DateTime      @default(now())
  customerName  String?
  totalAmount   Float
  paidAmount    Float
  isPaid        Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paymentMethod String?
  clientId      Int?
  creditNote    CreditNote?
  client        Client?       @relation(fields: [clientId], references: [id])
  details       SaleDetail[]
  payments      SalePayment[]
}

model SaleDetail {
  id             Int      @id @default(autoincrement())
  saleId         Int
  productId      Int
  quantity       Float
  unitPrice      Float
  totalPrice     Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  profitAmount   Float
  profitMargin   Float
  purchasePrice  Float
  suggestedPrice Float?
  product        Product  @relation(fields: [productId], references: [id])
  sale           Sale     @relation(fields: [saleId], references: [id])
}

model ProductMovement {
  id        Int          @id @default(autoincrement())
  productId Int
  type      MovementType
  quantity  Float
  createdAt DateTime     @default(now())
  notes     String?
  reason    String?
  product   Product      @relation(fields: [productId], references: [id])
}

model CashClosing {
  id            Int      @id @default(autoincrement())
  date          DateTime @unique
  openingCash   Float
  closingCash   Float
  systemCash    Float
  difference    Float
  totalSales    Float
  cashSales     Float
  cardSales     Float
  transferSales Float
  creditSales   Float
  totalIncome   Float
  totalExpense  Float
  totalPayments Float
  notes         String?
  createdAt     DateTime @default(now())
  createdById   Int?
  createdBy     User?    @relation("UserCashClosings", fields: [createdById], references: [id])
}

model Expense {
  id                 Int               @id @default(autoincrement())
  date               DateTime          @default(now())
  amount             Float
  description        String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  deletedAt          DateTime?
  notes              String?
  category           ExpenseCategory
  paymentMethod      String?
  recurringExpenseId Int?
  recurringExpense   RecurringExpense? @relation("RecurringExpenses", fields: [recurringExpenseId], references: [id])
}

model SalePayment {
  id        Int      @id @default(autoincrement())
  saleId    Int
  amount    Float
  date      DateTime @default(now())
  method    String?
  note      String?
  createdAt DateTime @default(now())
  sale      Sale     @relation(fields: [saleId], references: [id])
}

model CreditNote {
  id          Int                @id @default(autoincrement())
  saleId      Int                @unique
  date        DateTime           @default(now())
  totalAmount Float
  createdAt   DateTime           @default(now())
  sale        Sale               @relation(fields: [saleId], references: [id])
  details     CreditNoteDetail[]
}

model CreditNoteDetail {
  id           Int        @id @default(autoincrement())
  creditNoteId Int
  productId    Int
  quantity     Float
  unitPrice    Float
  totalPrice   Float
  creditNote   CreditNote @relation(fields: [creditNoteId], references: [id])
  product      Product    @relation(fields: [productId], references: [id])
}

model RecurringExpense {
  id            Int             @id @default(autoincrement())
  concept       String
  amount        Float
  category      ExpenseCategory
  paymentMethod String
  notes         String?
  daysOfMonth   Int[]
  createdAt     DateTime        @default(now())
  expenses      Expense[]       @relation("RecurringExpenses")
}

model Notification {
  id            Int                  @id @default(autoincrement())
  title         String
  message       String
  type          NotificationType
  priority      NotificationPriority @default(NORMAL)
  category      String
  relatedId     Int?
  relatedType   String?
  metadata      Json?
  isRead        Boolean              @default(false)
  isArchived    Boolean              @default(false)
  userId        Int?
  autoGenerated Boolean              @default(false)
  ruleId        Int?
  createdAt     DateTime             @default(now())
  readAt        DateTime?
  archivedAt    DateTime?
  rule          NotificationRule?    @relation(fields: [ruleId], references: [id])
  user          User?                @relation(fields: [userId], references: [id])
}

model NotificationRule {
  id            Int                   @id @default(autoincrement())
  name          String
  description   String?
  triggerType   NotificationTrigger
  category      String
  conditions    Json
  isActive      Boolean               @default(true)
  targetUsers   Int[]
  frequency     NotificationFrequency @default(IMMEDIATE)
  lastTriggered DateTime?
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  notifications Notification[]
}

model NotificationPreference {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  stockAlerts     Boolean  @default(true)
  expiryAlerts    Boolean  @default(true)
  paymentAlerts   Boolean  @default(true)
  salesAlerts     Boolean  @default(false)
  inventoryAlerts Boolean  @default(true)
  emailEnabled    Boolean  @default(false)
  pushEnabled     Boolean  @default(true)
  quietHoursStart String?
  quietHoursEnd   String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation("NotificationPreferences", fields: [userId], references: [id])
}

model Capital {
  id          Int      @id @default(autoincrement())
  cash        Float    @default(0)
  bank        Float    @default(0)
  description String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([date])
}

model CapitalMovement {
  id            Int      @id @default(autoincrement())
  type          String
  amount        Float
  description   String
  category      String
  paymentMethod String
  cashBefore    Float?
  bankBefore    Float?
  cashAfter     Float?
  bankAfter     Float?
  saleId        Int?
  invoiceId     Int?
  expenseId     Int?
  date          DateTime @default(now())
  createdAt     DateTime @default(now())

  @@index([type])
  @@index([category])
  @@index([date])
}

model Invoice {
  id                  Int           @id @default(autoincrement())
  invoiceNumber       String        @unique
  supplierName        String
  amount              Float
  paidAmount          Float         @default(0)
  status              String        @default("PENDING")
  description         String?
  invoiceDate         DateTime
  dueDate             DateTime?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  hasInventoryImpact  Boolean       @default(true)
  inventoryProcessed  Boolean       @default(false)
  isHistorical        Boolean       @default(false)
  needsReconciliation Boolean       @default(false)
  originalDocument    String?
  pricesAnalyzed      Boolean       @default(false)
  supplierId          Int?
  Supplier            Supplier?     @relation(fields: [supplierId], references: [id])
  InvoiceItem         InvoiceItem[]

  @@index([status])
  @@index([invoiceDate])
  @@index([dueDate])
  @@index([isHistorical])
  @@index([supplierId])
}

model CompanyConfig {
  id               Int      @id @default(autoincrement())
  companyName      String
  nit              String?
  address          String?
  phone            String?
  email            String?
  website          String?
  logo             String?
  invoicePrefix    String?
  invoiceFooter    String?
  taxRate          Float?   @default(0)
  currency         String   @default("COP")
  posReceiptHeader String?
  posReceiptFooter String?
  printLogo        Boolean  @default(false)
  timezone         String   @default("America/Bogota")
  dateFormat       String   @default("DD/MM/YYYY")
  numberFormat     String   @default("es-CO")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("company_config")
}

model SystemModule {
  id          Int                @id @default(autoincrement())
  name        String             @unique
  displayName String
  description String?
  route       String?
  icon        String?
  isActive    Boolean            @default(true)
  order       Int                @default(0)
  parentId    Int?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  permissions ModulePermission[]
  parent      SystemModule?      @relation("ModuleHierarchy", fields: [parentId], references: [id])
  children    SystemModule[]     @relation("ModuleHierarchy")

  @@map("system_modules")
}

model ModulePermission {
  id         Int          @id @default(autoincrement())
  moduleId   Int
  roleId     Int
  canView    Boolean      @default(false)
  canCreate  Boolean      @default(false)
  canEdit    Boolean      @default(false)
  canDelete  Boolean      @default(false)
  canExport  Boolean      @default(false)
  customData Json?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  module     SystemModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  role       Role         @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([moduleId, roleId])
  @@map("module_permissions")
}

model InvoiceItem {
  id                  Int      @id @default(autoincrement())
  invoiceId           Int
  description         String
  quantity            Float
  unitPrice           Float
  totalPrice          Float
  productId           Int?
  shouldCreateProduct Boolean  @default(false)
  affectInventory     Boolean  @default(true)
  currentMarketPrice  Float?
  priceVariation      Float?
  profitMargin        Float?
  notes               String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime
  Invoice             Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  Product             Product? @relation(fields: [productId], references: [id])

  @@index([invoiceId])
  @@index([productId])
}

enum MovementType {
  IN
  OUT
  ADJUST
}

enum ExpenseCategory {
  SERVICIOS
  SUMINISTROS
  ALQUILER
  OTRO
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

enum NotificationTrigger {
  STOCK_LOW
  STOCK_CRITICAL
  STOCK_OUT
  EXPIRY_SOON
  EXPIRY_TODAY
  PAYMENT_DUE
  PAYMENT_OVERDUE
  SALE_GOAL
  INVENTORY_VALUE_CHANGE
  PRODUCT_NO_MOVEMENT
  RECURRING_EXPENSE_DUE
}

enum NotificationFrequency {
  IMMEDIATE
  HOURLY
  DAILY
  WEEKLY
}

model SystemParameter {
  id            Int      @id @default(autoincrement())
  companyId     Int?     // Para multi-tenant en el futuro
  parameterKey  String   @unique @map("parameter_key")
  parameterValue Boolean @default(false) @map("parameter_value")
  parameterType String   @default("boolean") @map("parameter_type")
  stringValue   String?  @map("string_value")
  numberValue   Decimal? @map("number_value")
  jsonValue     Json?    @map("json_value")
  description   String?
  category      String?  @default("general")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("system_parameters")
}
