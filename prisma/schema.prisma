generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique
  password     String
  name         String
  isActive     Boolean       @default(true)
  roles        UserRole[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  cashClosings CashClosing[] @relation("UserCashClosings")
}

model Role {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  users       UserRole[]
}

model UserRole {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@id([userId, roleId])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Unit {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  symbol   String?
  products Product[]
}

model Product {
  id                  Int                  @id @default(autoincrement())
  name                String
  description         String?
  categoryId          Int
  category            Category             @relation(fields: [categoryId], references: [id])
  unitId              Int
  unit                Unit                 @relation(fields: [unitId], references: [id])
  stock               Float
  minStock            Float?
  purchasePrice       Float
  salePrice           Float
  imageUrl            String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  ProductMovement     ProductMovement[]
  PurchaseDetail      PurchaseDetail[]
  SaleDetail          SaleDetail[]
  creditNoteDetails   CreditNoteDetail[]   // relación inversa, sin @relation explícito
}

model Supplier {
  id        Int        @id @default(autoincrement())
  name      String
  nit       String     @unique
  phone     String?
  email     String?
  address   String?
  purchases Purchase[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Purchase {
  id          Int              @id @default(autoincrement())
  supplierId  Int
  supplier    Supplier         @relation(fields: [supplierId], references: [id])
  date        DateTime         @default(now())
  totalAmount Float
  paidAmount  Float
  isPaid      Boolean          @default(false)
  details     PurchaseDetail[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model PurchaseDetail {
  id         Int      @id @default(autoincrement())
  purchaseId Int
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Float
  unitCost   Float
  totalCost  Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Client {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String?
  email     String?
  document  String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sales     Sale[]
}

model Sale {
  id            Int               @id @default(autoincrement())
  date          DateTime          @default(now())
  customerName  String?
  totalAmount   Float
  paidAmount    Float
  clientId      Int?
  client        Client?           @relation(fields: [clientId], references: [id])
  paymentMethod String?
  isPaid        Boolean           @default(false)
  details       SaleDetail[]
  payments      SalePayment[]
  creditNote    CreditNote?       // inversa sin @relation
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model SaleDetail {
  id         Int      @id @default(autoincrement())
  saleId     Int
  sale       Sale     @relation(fields: [saleId], references: [id])
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Float
  unitPrice  Float
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ProductMovement {
  id        Int          @id @default(autoincrement())
  productId Int
  product   Product      @relation(fields: [productId], references: [id])
  type      MovementType
  quantity  Float
  price     Float?
  note      String?
  createdAt DateTime     @default(now())
}

enum MovementType {
  IN
  OUT
  ADJUST
}

model CashClosing {
  id            Int      @id @default(autoincrement())
  date          DateTime @unique
  openingCash   Float
  closingCash   Float
  systemCash    Float
  difference    Float
  totalSales    Float
  cashSales     Float
  cardSales     Float
  transferSales Float
  creditSales   Float
  totalIncome   Float
  totalExpense  Float
  totalPayments Float
  notes         String?
  createdAt     DateTime @default(now())
  createdById   Int?
  createdBy     User?    @relation("UserCashClosings", fields: [createdById], references: [id])
}

model Expense {
  id          Int      @id @default(autoincrement())
  date        DateTime @default(now())
  amount      Float
  description String
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SalePayment {
  id        Int      @id @default(autoincrement())
  saleId    Int
  sale      Sale     @relation(fields: [saleId], references: [id])
  amount    Float
  date      DateTime @default(now())
  method    String?
  note      String?
  createdAt DateTime @default(now())
}

model CreditNote {
  id          Int                @id @default(autoincrement())
  saleId      Int                @unique
  sale        Sale               @relation(fields: [saleId], references: [id])
  date        DateTime           @default(now())
  totalAmount Float
  details     CreditNoteDetail[]
  createdAt   DateTime           @default(now())
}

model CreditNoteDetail {
  id           Int         @id @default(autoincrement())
  creditNoteId Int
  creditNote   CreditNote  @relation(fields: [creditNoteId], references: [id])
  productId    Int
  product      Product     @relation(fields: [productId], references: [id])
  quantity     Float
  unitPrice    Float
  totalPrice   Float
}
