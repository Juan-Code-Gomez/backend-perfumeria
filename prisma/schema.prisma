generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  username  String     @unique
  password  String
  name      String
  isActive  Boolean    @default(true)
  roles     UserRole[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cashClosings CashClosing[] @relation("UserCashClosings")
}

model Role {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  users       UserRole[]
}

model UserRole {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@id([userId, roleId])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[] // relación inversa
}

model Unit {
  id       Int       @id @default(autoincrement())
  name     String    @unique // Ejemplo: "Gramos", "Onzas", "Frascos"
  symbol   String? // Ejemplo: "g", "oz", "ml"
  products Product[]
}

model Product {
  id              Int               @id @default(autoincrement())
  name            String
  description     String?
  categoryId      Int
  category        Category          @relation(fields: [categoryId], references: [id])
  unitId          Int
  unit            Unit              @relation(fields: [unitId], references: [id])
  stock           Float // Por si usas gramos, permite decimales
  minStock        Float? // Stock mínimo para alertas
  purchasePrice   Float // Precio de compra
  salePrice       Float // Precio de venta
  imageUrl        String? // Imagen del producto
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ProductMovement ProductMovement[]
  PurchaseDetail  PurchaseDetail[]
  SaleDetail      SaleDetail[]
}

model Supplier {
  id        Int        @id @default(autoincrement())
  name      String
  nit       String     @unique
  phone     String?
  email     String?
  address   String?
  purchases Purchase[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Purchase {
  id          Int              @id @default(autoincrement())
  supplierId  Int
  supplier    Supplier         @relation(fields: [supplierId], references: [id])
  date        DateTime         @default(now())
  totalAmount Float
  paidAmount  Float
  isPaid      Boolean          @default(false)
  details     PurchaseDetail[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model PurchaseDetail {
  id         Int      @id @default(autoincrement())
  purchaseId Int
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Float
  unitCost   Float
  totalCost  Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Sale {
  id           Int          @id @default(autoincrement())
  date         DateTime     @default(now())
  customerName String?
  totalAmount  Float
  paidAmount   Float
  paymentMethod String? // "Efectivo", "Transferencia", "Tarjeta"
  isPaid       Boolean      @default(false)
  details      SaleDetail[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  payments    SalePayment[] // relación inversa
}

model SaleDetail {
  id         Int      @id @default(autoincrement())
  saleId     Int
  sale       Sale     @relation(fields: [saleId], references: [id])
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Float
  unitPrice  Float
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ProductMovement {
  id        Int          @id @default(autoincrement())
  productId Int
  product   Product      @relation(fields: [productId], references: [id])
  type      MovementType // "IN", "OUT", "ADJUST"
  quantity  Float
  price     Float? // Precio unitario de compra o venta (si aplica)
  note      String? // Ejemplo: "Compra a Proveedor X", "Venta factura 123"
  createdAt DateTime     @default(now())
}

enum MovementType {
  IN // Entrada (compra)
  OUT // Salida (venta)
  ADJUST // Ajuste manual
}

model CashClosing {
  id            Int      @id @default(autoincrement())
  date          DateTime @unique // Un cierre por día
  openingCash   Float    // Saldo inicial (si se lleva control)
  closingCash   Float    // Saldo final contado por el cajero
  systemCash    Float    // Saldo calculado por el sistema (ventas - gastos + apertura)
  difference    Float    // Diferencia (closingCash - systemCash)
  totalSales    Float    // Ventas del día (suma total)
  cashSales     Float    // Ventas en efectivo
  cardSales     Float    // Ventas por tarjeta
  transferSales Float    // Ventas por transferencia
  creditSales   Float    // Ventas a crédito
  totalIncome   Float    // Ingresos extra
  totalExpense  Float    // Gastos del día (egresos)
  totalPayments Float    // Pagos a proveedores o abonos
  notes         String?  // Observaciones del cierre
  createdAt     DateTime @default(now())
  createdById   Int?     // Usuario que hizo el cierre (opcional)
  createdBy     User?    @relation("UserCashClosings", fields: [createdById], references: [id])
}


model Expense {
  id          Int      @id @default(autoincrement())
  date        DateTime @default(now())
  amount      Float
  description String
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Puedes agregar más campos según tu necesidad
}


model SalePayment {
  id        Int      @id @default(autoincrement())
  saleId    Int
  sale      Sale     @relation(fields: [saleId], references: [id])
  amount    Float    // Monto del abono
  date      DateTime @default(now())
  method    String?  // "Efectivo", "Transferencia", etc. (opcional)
  note      String?  // Observaciones (opcional)
  createdAt DateTime @default(now())
}
