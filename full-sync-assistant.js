const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m',
  bold: '\x1b[1m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function header(message) {
  console.log('\n' + '‚ïê'.repeat(60));
  log(`  ${message}`, 'cyan');
  console.log('‚ïê'.repeat(60) + '\n');
}

async function fullSyncProduction() {
  header('üöÄ SINCRONIZACI√ìN COMPLETA DE PRODUCCI√ìN');
  
  log('Este asistente te guiar√° paso a paso para:', 'blue');
  log('  1. Verificar diferencias', 'blue');
  log('  2. Crear backup de seguridad', 'blue');
  log('  3. Ejecutar migraci√≥n', 'blue');
  log('  4. Verificar resultado', 'blue');

  const readline = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
  });

  const ask = (question) => new Promise(resolve => readline.question(question, resolve));

  try {
    // Paso 1: Verificar configuraci√≥n
    header('PASO 1: Verificaci√≥n de Configuraci√≥n');
    
    require('dotenv').config();
    const databaseUrl = process.env.DATABASE_URL;

    if (!databaseUrl) {
      log('‚ùå DATABASE_URL no configurado en .env', 'red');
      log('üí° Configura DATABASE_URL apuntando a PRODUCCI√ìN', 'yellow');
      readline.close();
      process.exit(1);
    }

    const maskedUrl = databaseUrl.replace(/:[^:@]+@/, ':****@');
    log('‚úì DATABASE_URL configurado', 'green');
    log(`  ${maskedUrl}`, 'cyan');

    const answer1 = await ask('\n¬øEs correcta la conexi√≥n a PRODUCCI√ìN? (si/no): ');
    if (answer1.toLowerCase() !== 'si' && answer1.toLowerCase() !== 's') {
      log('\n‚ùå Proceso cancelado. Verifica DATABASE_URL en .env', 'yellow');
      readline.close();
      process.exit(0);
    }

    // Paso 2: Verificar diferencias
    header('PASO 2: An√°lisis de Diferencias');
    
    log('üîç Verificando qu√© falta en producci√≥n...', 'blue');
    
    const answer2 = await ask('\n¬øVerificar diferencias antes de continuar? (si/no): ');
    
    if (answer2.toLowerCase() === 'si' || answer2.toLowerCase() === 's') {
      log('\nüìä Ejecutando an√°lisis...', 'blue');
      
      try {
        const { execSync } = require('child_process');
        const diffOutput = execSync('node check-production-diff.js', { 
          encoding: 'utf-8',
          stdio: 'inherit'
        });
      } catch (error) {
        log('\n‚ö†Ô∏è  No se pudo ejecutar el an√°lisis autom√°tico', 'yellow');
        log('Continuando con la migraci√≥n...', 'yellow');
      }
      
      const answer3 = await ask('\n¬øContinuar con la migraci√≥n? (si/no): ');
      if (answer3.toLowerCase() !== 'si' && answer3.toLowerCase() !== 's') {
        log('\n‚ùå Proceso cancelado', 'yellow');
        readline.close();
        process.exit(0);
      }
    }

    // Paso 3: Backup
    header('PASO 3: Backup de Seguridad');
    
    log('üíæ Es ALTAMENTE RECOMENDADO crear un backup antes de migrar', 'yellow');
    
    const answer4 = await ask('\n¬øCrear backup autom√°tico? (si/no): ');
    
    if (answer4.toLowerCase() === 'si' || answer4.toLowerCase() === 's') {
      log('\nüì¶ Creando backup...', 'blue');
      
      try {
        // Verificar si pg_dump est√° disponible
        try {
          execSync('pg_dump --version', { stdio: 'ignore' });
        } catch {
          log('\n‚ö†Ô∏è  pg_dump no disponible', 'yellow');
          log('üí° Opciones:', 'yellow');
          log('  1. Hacer backup manual desde pgAdmin', 'yellow');
          log('  2. Continuar sin backup (NO RECOMENDADO)', 'yellow');
          
          const answer5 = await ask('\n¬øContinuar SIN backup? (si/no): ');
          if (answer5.toLowerCase() !== 'si' && answer5.toLowerCase() !== 's') {
            log('\n‚ùå Proceso cancelado. Haz backup manual primero.', 'yellow');
            readline.close();
            process.exit(0);
          }
        }

        // Intentar crear backup
        const parseConnectionString = (url) => {
          const match = url.match(/postgresql:\/\/([^:]+):([^@]+)@([^:]+):(\d+)\/(.+)/);
          if (!match) throw new Error('Invalid URL');
          return {
            user: match[1],
            password: match[2],
            host: match[3],
            port: match[4],
            database: match[5]
          };
        };

        const dbConfig = parseConnectionString(databaseUrl);
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 10);
        const backupDir = path.join(__dirname, 'backups');
        const backupFile = path.join(backupDir, `backup_${dbConfig.database}_${timestamp}.sql`);

        if (!fs.existsSync(backupDir)) {
          fs.mkdirSync(backupDir);
        }

        const backupCmd = `pg_dump -h ${dbConfig.host} -p ${dbConfig.port} -U ${dbConfig.user} -d ${dbConfig.database} -F p -f "${backupFile}"`;
        const env = { ...process.env, PGPASSWORD: dbConfig.password };
        
        execSync(backupCmd, { env, stdio: 'pipe' });

        if (fs.existsSync(backupFile)) {
          const sizeMB = (fs.statSync(backupFile).size / 1024 / 1024).toFixed(2);
          log(`\n‚úÖ Backup creado: ${backupFile} (${sizeMB} MB)`, 'green');
        }
        
      } catch (error) {
        log('\n‚ö†Ô∏è  No se pudo crear backup autom√°tico', 'yellow');
        log('Error: ' + error.message, 'red');
        
        const answer6 = await ask('\n¬øContinuar sin backup? (si/no): ');
        if (answer6.toLowerCase() !== 'si' && answer6.toLowerCase() !== 's') {
          log('\n‚ùå Proceso cancelado', 'yellow');
          readline.close();
          process.exit(0);
        }
      }
    }

    // Paso 4: Ejecutar migraci√≥n
    header('PASO 4: Ejecuci√≥n de Migraci√≥n');
    
    log('üîß Se ejecutar√°: sync-production-safe.sql', 'blue');
    log('   Este script:', 'blue');
    log('   ‚úì NO borra datos', 'green');
    log('   ‚úì Solo agrega/modifica estructura', 'green');
    log('   ‚úì Es idempotente (seguro ejecutar varias veces)', 'green');
    
    const answer7 = await ask('\n¬øEjecutar migraci√≥n AHORA? (si/no): ');
    
    if (answer7.toLowerCase() !== 'si' && answer7.toLowerCase() !== 's') {
      log('\n‚ùå Migraci√≥n cancelada', 'yellow');
      readline.close();
      process.exit(0);
    }

    log('\nüöÄ Ejecutando migraci√≥n...', 'blue');
    
    try {
      const sqlFile = path.join(__dirname, 'sync-production-safe.sql');
      const command = `psql "${databaseUrl}" -f "${sqlFile}"`;
      
      const output = execSync(command, { encoding: 'utf-8' });
      
      log('\n‚úÖ MIGRACI√ìN COMPLETADA EXITOSAMENTE', 'green');
      
      // Mostrar √∫ltimas l√≠neas del output
      const lines = output.trim().split('\n').slice(-10);
      log('\nüìã √öltimas l√≠neas del resultado:', 'cyan');
      lines.forEach(line => console.log('  ' + line));
      
    } catch (error) {
      log('\n‚ùå Error ejecutando migraci√≥n:', 'red');
      console.error(error.message);
      
      log('\nüí° Alternativa: Usar pgAdmin manualmente', 'yellow');
      log('   1. Abrir pgAdmin', 'yellow');
      log('   2. Query Tool ‚Üí Abrir sync-production-safe.sql', 'yellow');
      log('   3. Ejecutar (F5)', 'yellow');
      
      readline.close();
      process.exit(1);
    }

    // Paso 5: Post-migraci√≥n
    header('PASO 5: Post-Migraci√≥n');
    
    log('üîÑ Regenerando Prisma Client...', 'blue');
    
    try {
      execSync('npx prisma generate', { stdio: 'inherit' });
      log('‚úÖ Prisma Client regenerado', 'green');
    } catch (error) {
      log('‚ö†Ô∏è  Error regenerando Prisma Client', 'yellow');
      log('Ejecuta manualmente: npx prisma generate', 'yellow');
    }

    // Resumen final
    header('‚úÖ SINCRONIZACI√ìN COMPLETADA');
    
    log('üéâ Todo listo! Pr√≥ximos pasos:', 'green');
    log('  1. Reiniciar el backend en producci√≥n', 'blue');
    log('  2. Probar los m√≥dulos actualizados:', 'blue');
    log('     ‚Ä¢ Facturas', 'cyan');
    log('     ‚Ä¢ Compras con FIFO', 'cyan');
    log('     ‚Ä¢ Pagos de facturas', 'cyan');
    log('     ‚Ä¢ Sistema de par√°metros', 'cyan');
    log('  3. Verificar logs del servidor', 'blue');
    log('  4. Confirmar con usuarios', 'blue');
    
    log('\nüìÅ Archivos generados:', 'blue');
    log('  ‚Ä¢ Backup en: backups/', 'cyan');
    log('  ‚Ä¢ Logs de migraci√≥n disponibles', 'cyan');

    readline.close();

  } catch (error) {
    log('\n‚ùå Error inesperado:', 'red');
    console.error(error);
    readline.close();
    process.exit(1);
  }
}

fullSyncProduction();
